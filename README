Download the files to a directory. Set the working directory in R as that location.

You can then generate all the graphs in the paper. 

The OptionFunctions.R file contains a single function called MCVD (Monte Carlo Valuation and Delta), which is called from the main Option Valuation and Replication file when it needs to generate the initial option price and delta.

For Figures 1 and 2, the parameters at the start of the file are as are used to generate the graphs.

For Figure 3, I used:

S = K = 1, r = 0.015, q = 0.01, tau = 5, sigma = 0.20, nSim = 100, guyseed = 1930, p = 6, N = 60 * 2(m-1) [so N = 60, 120, 240, 480, 960, 1920].  And barrier_type = "fixed" and "trailing" (with quotes) as required.
Set Initial_values = the relevant values (generated from nSim = 50,000 and N = 6300 in MCVD() function, for greater accuracy) for the above parameters, around line 170. 
This took about 15 hours on my 13th generation Intel i5-13600KF processor, for each of "fixed" and "trailing".

For Figures 4 and 5, I used:
S = K = 1 (or 1.25), r = 0.015, q = 0.01, tau = 10, sigma = 0.20, nSim = 2400, guyseed = 1930, N = 1920. Again, barrier_type = "fixed" and "trailing" as required. This took about 8 hours.  Run 34 is the one graphed.

Again, set Initial_values = the relevant values for the above parameters, around line 170. 

Figure 6 was generated by taking results from Figures 1 & 2, then dividing by b_trailing and logging.


-----------------
NB All call option prices are evaluated solely by the call formula for a fixed barrier as in Thomas (2023), Equation 13 (even if you enter barrier_type ==“trailing”).  

I have not done the finite difference exercise for a call. Calls are of less interest than puts because I anticipate that synthetic replication will be cheaper for a call (albeit with interim losses), as in Thomas (2023).


